
-> Video No 56
Generics are introduced in C# 2.0. Generics allow us to design classes and methods decoupledfrom the data types.

Generic classes are extensively used by collection classes available in System.Collections. Generic namespace. (Covered in the next session)

One way of making AreEqual method reusable, is to use object type parameters.
Since, every type in .NET directly or indirectly inherit from System.Object type, AreEqual)
method works with aply data type, but the problem is performance degradation
due to boxing and unboxing happening.

Also, AreEuqal method is no longer type safe. It is now possible to pass integer for the first parameter, 
and a string for the second parameter. It doesn't really make sense to compare strings with integers.
So, the probem with using System.Object type is that

﻿﻿﻿i) AreEqual) method is not type safe
﻿﻿﻿ii) Performance degradation due to boxing and unboxing.

To make AreEqual() method generic, we specify a type parameter using angular brackets as shown below.
public static bool AreEqual<T>(T value1, T value2)
At the point, When the client code wants to invoke this method, they need to specify the type, 
they want the method to operate on. If the user wants the AreEqualo method to work with integers, they can invoke the method specifying int as the datatype using angular brackets as shown below. bool Equal - Calculator.AreEqual<int>(2, 1);
To operate with string data type
bool Equal - Calculator.AreEqual<string>("A", "B");
In this example, we made the method generic. Along the same lines, it is also possible 
to make classes, interfaces and delegates generic.
--------------------------------------------------------------

.............Video No 57
Why should you override ToString Method?

ToString is a common formatting method in . NET. 
It converts an object to its string representation so that it is 
suitable for display. 