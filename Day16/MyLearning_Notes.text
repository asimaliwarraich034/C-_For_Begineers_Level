

Video No 40 
Exception Handling in C#

An Exception is an unforcean error that occur when a program is running.
examples:
Trying to read from a file that does not exist, throws FileNotFoundException.
Trying to read from a Dtabase table that does not exisist, throws a SqlException.

Showing actual unhandled Exception to end user is bad for two reasons.
1. User will be annoyed as they are crytic and does not make much sense 
to end user.
2. Exception contain information, that can be used for hacking into your application.

 
An exception is actually a class that derives from System.Exception class.
The System.Exception class has several useful properties, that provide valuable
information about exception.
->Message: Get the message that describes the current exception
->Stack trace:provide the line number in the method where the excetip occur 
  
We can handle exception using the constructor "try"
put the code into try bock  which 
is possibly throgh the exception.

System.Exception is the base class of all exceptions we have.


Fiannaly block:clean and free resources that the class was holding 
onto during the program execution.
finally block is guranteed to exceute, irrespectively of whether there is an 
exception or not.

------------------------------------------------------------------
 ----------------------  Video No 41 -----------------------------
 Inner Excetion:
 The InnerException property returns the Exception instance that
 caused the current exception.

 To retain the origional exception pass it as a parameter to the 
 constructor, of the current exception.

Always check if inner excetion is not null before accessing
any property of the inner exception object
else , you may get Null Reference exception

To get the type of Innerexception use the GetType() method.
-------------------------------------------------------------------------------

---------------------------------Video No 42-------------------------------------
Custome Excetion 

Custome exception inherit from from base exception class
All of the exception end with suffix exception so follow the 
covention and add he suffix exception at the end of custom exception

-> Serialiozation: 
Breaking down objects into packets that can be
transmitted over the network
if you want to move your object from one app to another over internet then use this

Custom Exception - Steps
???Create a class that derives from System.Exception class.
As a convention, end the class name with Exception suffix. 
All NET exceptions end with, exception suffix.

???Provide a public constructor, that takes in a string parameter. This constructor 
simply passes the string parameter, to the base exception class constructor.
???
Using InnerExceptions, you can also track back the original exception.
If you want to provide this capability for your custom exception class,
then overload the cons Auctor accordingly.
???
If you want your Exception class object to work across application domains, then the object must be serializable. 
To make your exception class serializable mark it with Serializable attribute and provide a constructor that invokes the base Exception class constructor that takes in Serializationinfo and StreamingContext objects as parameters.
Note: It is also possible to provide your own custom serialization, which will discussin a later session.

----------------------------------------------------------
---------------------------Video No 43-----------------------------

-> Abuse of Exception Handling 
Exceptions are unforeseen errors that occur when a program is running. 
For example, when an application is executing a query, the database connection is lost.
Exception handling is generally used to handle these scenarios.

Using exception handling to implement program logical flow is bad 
and is termed as exception handling abuse.