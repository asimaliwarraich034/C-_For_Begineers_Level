
---------------------------Video no 28 ----------------

- Introduction to structs in C#
- Similarities between structs and classes: both can have private fields, public properties, constructors, and methods
- Example of creating a struct, similar to creating a class
- Usage of properties to encapsulate private fields
- Introduction to object initializers syntax in C# 3.0 for initializing structs and classes



.........................Video No 29 ....................

Difference B/W Classes and Structures
_> Struct is a vlaue Type where as a class is a reference Type.
Built in data types are struct value types, like int,float,double , enum etc.
Classes interfaces and delegates etc are Reference Type.
-> Structs are stroed on the Stack, where as clsses are stored on the Heap.

-> Value Types hold their value in a memory where they are declarted,
but reference type holda reference to an object in a memory.

-> Value types are detroyed Immediately after the scope is lost,
where as reference types only the reference variable is destroyed after
the scope is lost.The object is later destroyed by the Garbage 
collector.

-> When you copy a struct into another struct, a new copy of that struct
gets created and modification on one struct will not affect the values 
contained by the other struct.

-> When you copy a class into another class , we only geta copy of the 
reference variable. Both the reference variable point to the same object
on the heap. So, operation on one variable  will affect the value 
contained by the other reference variable.

-> Structs Can't have destructor , but Classes can have destructors

-> Structs can't have expilcit parameter less constructor where as a class can.


-> Struct can't inherit from another class where as a class can, Both 
structs and classes can inherit from an interfaces.

-> Example of structs in the .NET Freamework -int(System.Int32),
double(System.Double) etc.


Noted: A class (sealed) or a struct cannot inherit from another struct.
Struct are sealed type.

-----------------------------------------------------------------------------------------

------    Video No 30 ----------------------
->   Interfaces 

-> We create Interfaces using interface keyword, just like classes,
interfaces also contains propertoies, methods,delegates or events, but
only declarations and no imlementatation

-> It is comppile time error to provide implementatation for any interface member.
-> Interface members are public by defaualt, and they don't allow explicit access modifiers.
-> Interfaces cannot contain fields.

-> If a class  inherit from an interface,it must provide impolementation for all
interface members.Otherwise, we get a compiler error.

-> A class can  inherit from more than one interface at the 
same time, but where as, a class cannot inherit from more than once class at the same time.

-> Interfaces can inherited from other interfaces . A class that inherit
this interface must  provide implementation fro all interface members
in the entire interface inheritence chain.

-> We cannot create an instance of an interface, but an interface varaibale can 
point to a derived class object.

-------------------------------------------------------------------------------------------------

------------- Video No 31 -------------
Explicit Interface Implementation
Qestion:
A class inherit from 2 interfaces and both the interfaces have the same method name.
How shopiuld the class implement the method for both the interfaces?


In order to invoke the Explicit Interface Implementation use the 
Interface reference variable

Note:
Want to make one interface method default, then implement that
method normally and the other interface method explicitly. This makes
the default method to accessibl through the class instance.

-------------------------------------------------------------------------

---------------    Video No 32 ---------------------------------------------

Abstract Classes 

-> The abstract keyword is used to create the Abstract class
-> The Abstract class is incomplete and hence cannot be implemented.
->  An abstract class can only be used as base class.
An Abstract class cannot be sealed.
-> An Abstract class may contain abstracty members(methods, properites,indexes and event, etc)
, but not mendatory
-> If  a class is inherited an abstract class, there are 2 options
Option1: Provide the implementation for all the abstract members inherited
from the base abstract

Option2: If the class does not wish to provide the implementation for the the
abstarct members inherited from the  abstract class, then the class has to be marked as abstract